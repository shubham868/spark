# creating our map function.

def my_map(c,f):
 l = []
 for i in c:
  l.append(f(i))
 return l
##################################################################################################################

orderItems = sc.textFile("/user/shubham868/data/retail_db/order_items")
for i in orderItems.take(10): print(i)

#maximum revenue generated for a givin orderId

orderItems = sc.textFile("/user/shubham868/data/retail_db/order_items")
orderItemsFilter = orderItems.filter(lambda oi:int(oi.split(",")[1] == 2))
orderItemsMaxRevenue = orderItemsFilter.reduce(lambda max,val:float(oi.split(",")[4]) > float(oi.split(",")[4]))
print(orderItemsMaxRevenue)

####################################################################################################################

# get revenue for each order_id

orderItems = sc.textFile("/user/shubham868/data/retail_db/order_items")
orderItemsMap = orderItems.map(lambda oi:(int(oi.split(",")[1])),float(oi.split(",")[4]))
orderItemsReduce = orderItemsMap.reduce(lambda a,b: a+b)
for i in orderItemsReduce.take(10):print(i)

or(groupByKey)

orderItems = sc.textFile("/user/shubham868/data/retail_db/order_items")
orderItemMap = orderItems.map(lambda oi:(int(oi.split(",")[1]),float(oi.split(",")[4])))
orderItemGroupByKey = orderItemMap.groupByKey()
orderItemRevenue = orderItemGroupByKey.map(lambda tup:(tup[0],sum(tup[1])))
for i in orderItemRevenue.take(10):print(i)

or (reduceByKey)

orderItems = sc.textFile("/user/shubham868/data/retail_db/order_items")
orderItemsMap = orderItems.map(lambda oi:(int(oi.split(",")[1]),oi))
orderItemsReduceByKey = orderItemsMap.reduce(lambda a,b: float(a.split(",")[3]) + float(b.split(",")[3]))
for i in orderItemsReduceByKey.take(10):print(i)

####################################################################################################################



